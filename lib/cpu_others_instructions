#include <cpu.h>

void add_register(cpu_context *cpu, uint8_t *dst, uint8_t *src) {
    uint16_t result = *dst + *src;

    if ((uint8_t)result == 0) {
        SET_ZERO_FLAG(cpu);
    } else {
        CLEAR_ZERO_FLAG(cpu);
    }

    if (result > 0xFF) {
        SET_CARRY_FLAG(cpu);
    } else {
        CLEAR_CARRY_FLAG(cpu);
    }

    if (((*dst & 0xF) + (*src & 0xF)) > 0xF) {
        SET_HALF_CARRY_FLAG(cpu);
    } else {
        CLEAR_HALF_CARRY_FLAG(cpu);
    }

    *dst = (uint8_t)result;
    cpu->regi.pc += 1;
    cpu->cycles += 4;
}

void adc_register(cpu_context *cpu, uint8_t *dst, uint8_t *src) {
    uint8_t carry = (cpu->regi.f & (1 << 4)) ? 1 : 0;
    uint16_t result = *dst + *src + carry;

    if ((uint8_t)result == 0) {
        SET_ZERO_FLAG(cpu);
    } else {
        CLEAR_ZERO_FLAG(cpu);
    }

    if (result > 0xFF) {
        SET_CARRY_FLAG(cpu);
    } else {
        CLEAR_CARRY_FLAG(cpu);
    }

    if (((*dst & 0xF) + (*src & 0xF) + carry) > 0xF) {
        SET_HALF_CARRY_FLAG(cpu);
    } else {
        CLEAR_HALF_CARRY_FLAG(cpu);
    }

    *dst = (uint8_t)result;
    cpu->regi.pc += 1;
    cpu->cycles += 4;
}

void sub_register(cpu_context *cpu, uint8_t *dst, uint8_t *src) {
    uint16_t result = *dst - *src;

    if ((uint8_t)result == 0) {
        SET_ZERO_FLAG(cpu);
    } else {
        CLEAR_ZERO_FLAG(cpu);
    }
    if (*dst < *src) {
        SET_CARRY_FLAG(cpu);
    } else {
        CLEAR_CARRY_FLAG(cpu);
    }
    if ((*dst & 0xF) < (*src & 0xF)) {
        SET_HALF_CARRY_FLAG(cpu);
    } else {
        CLEAR_HALF_CARRY_FLAG(cpu);
    }
    SET_SUBTRACT_FLAG(cpu);

    *dst = (uint8_t)result;
    cpu->regi.pc += 1;
    cpu->cycles += 4;
}

void sbc_register(cpu_context *cpu, uint8_t *dst, uint8_t *src) {
    uint8_t carry = (cpu->regi.f & (1 << 4)) ? 1 : 0;
    uint16_t result = *dst - *src - carry;

    if ((uint8_t)result == 0) {
        SET_ZERO_FLAG(cpu);
    } else {
        CLEAR_ZERO_FLAG(cpu);
    }
    if (*dst < *src + carry) {
        SET_CARRY_FLAG(cpu);
    } else {
        CLEAR_CARRY_FLAG(cpu);
    }
    if ((*dst & 0xF) < (*src & 0xF) + carry) {
        SET_HALF_CARRY_FLAG(cpu);
    } else {
        CLEAR_HALF_CARRY_FLAG(cpu);
    }
    SET_SUBTRACT_FLAG(cpu);

    *dst = (uint8_t)result;
    cpu->regi.pc += 1;
    cpu->cycles += 4;
}

void and_register(cpu_context *cpu, uint8_t *dst, uint8_t *src) {
    *dst &= *src;

    if (*dst == 0) {
        SET_ZERO_FLAG(cpu);
    } else {
        CLEAR_ZERO_FLAG(cpu);
    }
    CLEAR_CARRY_FLAG(cpu);
    CLEAR_HALF_CARRY_FLAG(cpu);
    CLEAR_SUBTRACT_FLAG(cpu);

    cpu->regi.pc += 1;
    cpu->cycles += 4;
}
